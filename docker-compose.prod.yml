version: '3'
services:
  redis:
    image: redis:latest
    networks:
      - webnet
  sms-db:
    image: postgres
    container_name:
      sms_app_db
    environment:
      POSTGRES_PASSWORD: 12345678
      POSTGRES_USER: admin
      POSTGRES_DB: sms_app_db_dev
    networks:
      - webnet
  sms-app:
    image: appshop/sms-service
    depends_on:
      - sms-db
      - redis
    environment:
      PORT: 80
      NODE_ENV: production
      PG_DB: sms_app_db_dev
      PG_USER: admin
      PG_PASSWORD: 12345678
      PG_HOST: sms-db
      REDIS_HOST: redis
      TW_SID: AC94d7879854da55ed50ad0781c123a56b
      TW_TOKEN: dd2f087c4a0006a4fa1bf1ff4a23dc9d
      TW_NUMBER: +14387006921 
    command:
      ["npm", "run", "start:prod"]
    networks:
      - webnet
  db:
    image: postgres
    container_name:
      youhire_db
    environment:
      POSTGRES_PASSWORD: 12345678
      POSTGRES_USER: admin
      POSTGRES_DB: youhire_db
    networks:
      - webnet
  server:
    image: darthven/youhire-backend
    container_name:
      youhire_server 
    depends_on:
      - db
      - sms-app
    environment:
      PG_HOST: db
      PORT: 80      
      SMS_APP_HOST: sms-app
      SMS_APP_PORT: 80
    command:
      ["npm", "run", "start:prod"]
    ports:
      - "443:80"
    networks:
      - webnet
networks:
  webnet:
    
# docker kill $(docker ps -q)                                       # stop all containers
# docker rm $(docker ps -a -q)                                      # remove all containers
# docker rmi $(docker images -q)                                    # remove all docker images
# docker volume ls -qf dangling=true | xargs docker volume rm    # remove all docker volumes

